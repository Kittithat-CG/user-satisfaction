// const API_BASE = "https://beverest.thaibev.com/satisfaction/";
    (function () {
                console.log("‚úÖ Widget Loaded! (‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Feedback ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á Modal ‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î)");
            
                function getUserId() {
                    return localStorage.getItem("web-portal-employee-id") || null;
                }
            
                async function getUserFeedbackStatus() {
                    const user_id = getUserId();
                    if (!user_id) {
                        console.log("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ `user_id` ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ");
                        return { hasFeedback: false, lastDismissTime: null };
                    }
            
                    try {
                        const response = await fetch(`https://user-satisfaction.onrender.com/${user_id}`, {
                            headers: { "Referer": window.location.origin }
                        });
                        const data = await response.json();
                console.log("üì° API Response:\n" +
                `-hasFeedback: ${data.hasFeedback}\n` +
                `-message: ${data.message}\n` +
                `-lastDismissTime: ${data.lastDismissTime}\n` +
                `-App Id: ${data.app_id}`);
                        return data;
                    } catch (error) {
                        console.error("‚ùå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Feedback ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
                        return { hasFeedback: false, lastDismissTime: null };
                    }
                }
            
                async function showModal() {
                    const { hasFeedback } = await getUserFeedbackStatus();
                    if (hasFeedback) {
                        console.log("‚úÖ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á Modal");
                        return;
                    }
            
                    console.log("üõë ‡πÅ‡∏™‡∏î‡∏á Modal ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô");
            
                    const overlay = document.createElement("div");
                    overlay.id = "feedback-overlay";
                    overlay.style = `
                        position: fixed; top: 0; left: 0; width: 100%; height: 100%;
                        background: rgba(0, 0, 0, 0.5); z-index: 999; display: flex;
                        align-items: center; justify-content: center;
                        padding: 10px;
                    `;
            
                    const modal = document.createElement("div");
                    modal.style = `
                        background: white; padding: 20px; max-width: 450px; width: 90%;
                        box-shadow: 0px 5px 15px rgba(0,0,0,0.3);
                        border-radius: 12px; text-align: center;
                        font-family: Arial, sans-serif;
                    `;
                    modal.innerHTML = `
                        <h2 style="font-size: 20px; color: #333;">‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏∂‡∏á‡∏û‡∏≠‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö üòäüôè</h2>
                        <p style="color: gray; font-size: 14px;">(Please rate your satisfaction with the system.)</p>
                        <div id="star-rating" style="font-size: 40px; margin: 15px 0;">
                            <span class="star" data-value="1">‚òÜ</span>
                            <span class="star" data-value="2">‚òÜ</span>
                            <span class="star" data-value="3">‚òÜ</span>
                            <span class="star" data-value="4">‚òÜ</span>
                            <span class="star" data-value="5">‚òÜ</span>
                        </div>
                        <textarea id="comment" placeholder="‡∏ö‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏£‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‚ú®" 
                            style="width: 90%; height: 80px; border-radius: 6px; padding: 10px; border: 1px solid #ccc; font-size: 14px;"></textarea>
                        <br>
                        <button id="submit-feedback" style="background: #28a745; color: white; padding: 12px; border: none; border-radius: 6px; margin-top: 12px; font-size: 16px; cursor: pointer; width: 90%;">‡∏™‡πà‡∏á</button>
                        <button id="close-modal" style="background: #6c757d; color: white; padding: 12px; border: none; border-radius: 6px; margin-top: 10px; font-size: 16px; cursor: pointer; width: 90%;">‡πÑ‡∏ß‡πâ‡∏Ñ‡∏£‡∏≤‡∏ß‡∏´‡∏•‡∏±‡∏á</button>
                    `;
            
                    overlay.appendChild(modal);
                    document.body.appendChild(overlay);
            
                    let selectedRating = 0;
                    const stars = modal.querySelectorAll(".star");
            
                    function highlightStars(rating) {
                        stars.forEach(star => {
                            star.textContent = parseInt(star.getAttribute("data-value")) <= rating ? "‚òÖ" : "‚òÜ";
                            star.style.color = parseInt(star.getAttribute("data-value")) <= rating ? "gold" : "gray";
                        });
                    }
            
                    stars.forEach(star => {
                        star.style.cursor = "pointer";
                        star.style.transition = "color 0.2s ease";
                        star.addEventListener("click", function () {
                            selectedRating = parseInt(this.getAttribute("data-value"));
                            highlightStars(selectedRating);
                            console.log("‚≠ê Selected Rating:", selectedRating);
                        });
                    });
            
                    document.getElementById("close-modal").addEventListener("click", async () => {
                        overlay.remove();
            
                        const user_id = getUserId();
                        if (!user_id) return;

                        const {  app_id } = await getUserFeedbackStatus();

                        if (!app_id) {
                        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö `app_id` ‡∏à‡∏≤‡∏Å API ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏î‡πâ");
                        return;
                        }
                        console.log("üîÑ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤ last_dismiss_time...");
                        await fetch("https://user-satisfaction.onrender.com/api/feedback", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ user_id, app_id }) // ‚úÖ ‡πÉ‡∏ä‡πâ `app_id` ‡∏à‡∏≤‡∏Å API
                        });
                    });
            
                    document.getElementById("submit-feedback").addEventListener("click", async () => {
                        if (selectedRating === 0) {
                            alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á");
                            return;
                        }
            
                        const user_id = getUserId();
                        if (!user_id) {
                            console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö `user_id` ‡πÉ‡∏ô localStorage['web-portal-employee-id']");
                            return;
                        }
            
                        const comment = document.getElementById("comment").value;
                        const referrer = window.location.origin;
            
                        console.log("üì§ ‡∏™‡πà‡∏á Feedback:", { user_id, rating: selectedRating, comment, referrer });
            
                        const response = await fetch("https://user-satisfaction.onrender.com/api/feedback", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({ user_id, rating: selectedRating, comment, referrer })
                        });
            
                        if (response.ok) {
                            alert("‚úÖ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô!");
                            overlay.remove();
                        } else {
                            alert("‚ùå ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà!");
                        }
                    });
                }
            
                async function initFeedbackCheck() {
                    console.log("‚è≥ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Feedback...");
            
                    const user_id = getUserId();
                    if (!user_id) {
                        console.log("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ `user_id` ‡∏£‡∏≠ Login...");
                        return;
                    }
            
                    const { hasFeedback, lastDismissTime } = await getUserFeedbackStatus();
            
                    if (hasFeedback) {
                        console.log("‚úÖ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á Modal");
                        return;
                    }
            
                    if (lastDismissTime) {
                        const dismissTime = new Date(lastDismissTime).getTime();  
                        const nowLocal = new Date().getTime();
                        const nextShowTime = dismissTime + (23 * 60 * 60 * 1000); // +23 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
                    
                        console.log(`- dismissTime: ${dismissTime}`, new Date(dismissTime).toString());
                        console.log(`- now (Local): ${nowLocal}`, new Date(nowLocal).toString());
                        console.log(`- nextShowTime: ${nextShowTime}`, new Date(nextShowTime).toString());
                    
                        if (nowLocal < nextShowTime) {
                            const remainingTime = Math.ceil((nextShowTime - nowLocal) / 1000);
                            console.log(`‚è≥ Modal ‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏µ‡∏Å‡πÉ‡∏ô ${remainingTime} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ`);
                            setTimeout(showModal, remainingTime * 1000);
                            return;
                        }
                    }
                    
                    
                    
            
                    console.log("‚è≥ ‡∏£‡∏≠ 30 ‡∏ß‡∏¥‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á Feedback...");
                    setTimeout(showModal, 30 * 1000);
                }
            
                initFeedbackCheck();
            })();
            
